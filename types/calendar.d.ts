export default class Calendar {
    static get defaultProps(): {
        onDropdownFocus: () => void;
        monthsShown: number;
        monthSelectedIn: number;
        forceShowMonthNavigation: boolean;
        timeCaption: string;
        previousYearButtonLabel: string;
        nextYearButtonLabel: string;
        previousMonthButtonLabel: string;
        nextMonthButtonLabel: string;
        customTimeInput: any;
        yearItemNumber: number;
    };
    static propTypes: {
        adjustDateOnChange: any;
        arrowProps: any;
        chooseDayAriaLabelPrefix: any;
        className: any;
        children: any;
        container: any;
        dateFormat: any;
        dayClassName: any;
        weekDayClassName: any;
        disabledDayAriaLabelPrefix: any;
        monthClassName: any;
        timeClassName: any;
        disabledKeyboardNavigation: any;
        calendarStartDay: any;
        dropdownMode: any;
        endDate: any;
        excludeDates: any;
        filterDate: any;
        fixedHeight: any;
        formatWeekNumber: any;
        highlightDates: any;
        includeDates: any;
        includeTimes: any;
        injectTimes: any;
        inline: any;
        shouldFocusDayInline: any;
        locale: any;
        maxDate: any;
        minDate: any;
        monthsShown: any;
        monthSelectedIn: any;
        nextMonthAriaLabel: any;
        nextYearAriaLabel: any;
        onClickOutside: any;
        onMonthChange: any;
        onYearChange: any;
        forceShowMonthNavigation: any;
        onDropdownFocus: any;
        onSelect: any;
        onWeekSelect: any;
        showTimeSelect: any;
        showTimeInput: any;
        showMonthYearPicker: any;
        showFullMonthYearPicker: any;
        showTwoColumnMonthYearPicker: any;
        showFourColumnMonthYearPicker: any;
        showYearPicker: any;
        showQuarterYearPicker: any;
        showTimeSelectOnly: any;
        timeFormat: any;
        timeIntervals: any;
        onTimeChange: any;
        timeInputLabel: any;
        minTime: any;
        maxTime: any;
        excludeTimes: any;
        filterTime: any;
        timeCaption: any;
        openToDate: any;
        peekNextMonth: any;
        previousMonthAriaLabel: any;
        previousYearAriaLabel: any;
        scrollableYearDropdown: any;
        scrollableMonthYearDropdown: any;
        preSelection: any;
        selected: any;
        selectsEnd: any;
        selectsStart: any;
        selectsRange: any;
        showMonthDropdown: any;
        showPreviousMonths: any;
        showMonthYearDropdown: any;
        showWeekNumbers: any;
        showYearDropdown: any;
        startDate: any;
        todayButton: any;
        useWeekdaysShort: any;
        formatWeekDay: any;
        withPortal: any;
        weekLabel: any;
        yearItemNumber: any;
        yearDropdownItemNumber: any;
        setOpen: any;
        shouldCloseOnSelect: any;
        useShortMonthInDropdown: any;
        showDisabledMonthNavigation: any;
        previousMonthButtonLabel: any;
        nextMonthButtonLabel: any;
        previousYearButtonLabel: any;
        nextYearButtonLabel: any;
        renderCustomHeader: any;
        renderDayContents: any;
        onDayMouseEnter: any;
        onMonthMouseLeave: any;
        showPopperArrow: any;
        handleOnKeyDown: any;
        handleTimeKeyDown: any;
        isInputFocused: any;
        customTimeInput: any;
        weekAriaLabelPrefix: any;
        setPreSelection: any;
    };
    constructor(props: any);
    containerRef: any;
    state: {
        date: any;
        selectingDate: any;
        monthContainer: any;
    };
    componentDidMount(): void;
    assignMonthContainer: void;
    componentDidUpdate(prevProps: any): void;
    handleClickOutside: (event: any) => void;
    setClickOutsideRef: () => any;
    handleDropdownFocus: (event: any) => void;
    getDateInView: () => any;
    increaseMonth: () => void;
    decreaseMonth: () => void;
    handleDayClick: (day: any, event: any, monthSelectedIn: any) => void;
    handleDayMouseEnter: (day: any) => void;
    handleMonthMouseLeave: () => void;
    handleYearChange: (date: any) => void;
    handleMonthChange: (date: any) => void;
    handleMonthYearChange: (date: any) => void;
    changeYear: (year: any) => void;
    changeMonth: (month: any) => void;
    changeMonthYear: (monthYear: any) => void;
    header: (date?: any) => any[];
    formatWeekday: (day: any, locale: any) => any;
    decreaseYear: () => void;
    renderPreviousButton: () => any;
    increaseYear: () => void;
    renderNextButton: () => any;
    renderCurrentMonth: (date?: any) => any;
    renderYearDropdown: (overrideHide?: boolean) => any;
    renderMonthDropdown: (overrideHide?: boolean) => any;
    renderMonthYearDropdown: (overrideHide?: boolean) => any;
    renderTodayButton: () => any;
    renderDefaultHeader: ({ monthDate, i }: {
        monthDate: any;
        i: any;
    }) => any;
    renderCustomHeader: (headerArgs?: {}) => any;
    renderYearHeader: () => any;
    renderHeader: (headerArgs: any) => any;
    renderMonths: () => any[];
    monthContainer: any;
    renderYears: () => any;
    renderTimeSection: () => any;
    renderInputTimeSection: () => any;
    render(): any;
}
